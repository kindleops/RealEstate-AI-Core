"""Logging helpers for agent interactions."""

from __future__ import annotations

from datetime import datetime, timezone
from pathlib import Path
from typing import Callable, Dict, Optional

LOG_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S.%fZ"
DEFAULT_LOG_PATH = Path("logs/agent.log")


def _format_entry(agent: str, input_text: str, output_text: str, timestamp: datetime) -> str:
    formatted_agent = agent.upper()
    return (
        f"[{timestamp.strftime(LOG_DATETIME_FORMAT)}] "
        f"Agent: {formatted_agent} | Input: \"{input_text}\" | Output: \"{output_text}\"\n"
    )


def log_interaction(
    agent: str,
    input_text: str,
    output_text: str,
    *,
    destination: str = "file",
    log_file_path: Path | str = DEFAULT_LOG_PATH,
    airtable_table: Optional[Callable[[Dict[str, str]], None]] = None,
) -> str:
    """Record an interaction either locally or in Airtable.

    Args:
        agent: Identifier for the agent. The stored log will use an upper-case
            representation (``Agent: SMS``).
        input_text: Raw text provided to the agent.
        output_text: Response generated by the agent.
        destination: Either ``"file"`` or ``"airtable"``.
        log_file_path: Location of the local log when ``destination`` equals
            ``"file"``.
        airtable_table: Callable with a ``create`` method or a callable itself
            that accepts a mapping when ``destination`` equals ``"airtable"``.

    Returns:
        The formatted log entry string.
    """

    timestamp = datetime.now(timezone.utc)
    entry = _format_entry(agent, input_text, output_text, timestamp)

    if destination == "file":
        path = Path(log_file_path)
        path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("a", encoding="utf-8") as log_file:
            log_file.write(entry)
    elif destination == "airtable":
        if airtable_table is None:
            raise ValueError("An Airtable table callable must be provided for Airtable logging.")

        if hasattr(airtable_table, "create"):
            airtable_table.create(
                {
                    "Timestamp": timestamp.isoformat(),
                    "Agent": agent.upper(),
                    "Input": input_text,
                    "Output": output_text,
                    "Log": entry.strip(),
                }
            )
        else:
            airtable_table(
                {
                    "Timestamp": timestamp.isoformat(),
                    "Agent": agent.upper(),
                    "Input": input_text,
                    "Output": output_text,
                    "Log": entry.strip(),
                }
            )
    else:
        raise ValueError("destination must be either 'file' or 'airtable'")

    return entry


__all__ = ["log_interaction", "LOG_DATETIME_FORMAT", "DEFAULT_LOG_PATH"]
